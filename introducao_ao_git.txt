
## AJUDA ##
$ git  --help

## Configurar usuário:------------$ git config --global user.name "Alexandre Hesse"
## Configurar email:------------- $ git config --global user.email "ale.hesse@gmail.com"

## Verifica as configurações de nome e email
----------------------------------$ git config user.name
----------------------------------$ git config user.email

## Usando VSCode: Diretório existente ########################################################

	> No github criar um novo repositório
	> Abrir o diretório com VSCode > Dentro do vscode abrir o terminal
	> obter o HTTPS do mesmo... ex: https://github.com/AleHesse/somente_um_teste.git

…or push an existing repository from the command line
git init
git add .
git commit -m "primeiro commit"
git remote add origin https://github.com/AleHesse/seu_diretorio.git
git remote -v
git push origin master
git status


################################################################################################



## Status do Arquivo:------------ $ git status
## Inicializar Git:-------------- $ git init

## Adicionar arquivo para o Stage(segundo estado, palco)
----------------------------------$ git add teste.txt
----------------------------------$ git add . 	(1 ou + arquivos)
## Retirar arquivo do Stage (palco)
----------------------------------$ git rm --cached seuarqivo

## Realizar o Commit:------------ $ git commit -m "identifique o seu commit"
## Visualizar os commit's-------- $ git log  
----------------------------------$ git log --oneline

## Criar seu repositório no github...

	acessar: https://github.com/AleHesse
	> No Overview, canto superior esquerdo clicar em + > New Repository
	> Determinar o nome(Repository name) e definir Public or Private > criar Repository

## Equipamento Local

	## Usando GitBash ou cmd:
	> Navegar até o local do diretório >  cd.. or cd suapasta or c:

	## Mostra o path:---------------- $ pwd
	## Limpar tela:------------------ $ crtl + L
	## Criar pasta:------------------ $ mkdir suapasta
	## Criar arquivo:---------------- $ touch teste.txt
	## Visualizar diretório:--------- $ ls
	## Visualização completa:-------- $ ls -l

	## Usando VSCode: New Directory

	> Criar um novo diretório local > abrir o diretório com VSCode > Dentro do vscode abrir o terminal
	

echo "# somente_um_teste *opcional..." >> README.md				//opcional
git init
git add README.md												//opcional
git commit -m "first commit"									//first time only
git branch -M main												//first time only
git remote add origin https://github.com/AleHesse/teste.git		//first time only
git push -u origin main											//first time only



## Realizar o upload para github--$git push

### Apos o primeiro Push somente usar $ git push	(Upload)
--------------------------------------$ git pull	(Download)


Obs: Para sair do pager less (END) e voltar ao terminal, você pode pressionar a tecla q.

## Visualizar o conteúdo arq----- $ cat seuarquivo.extensão

## Excluir arquivo:-------------- $ git rm nomedoarquivo.extesao ()
				$ git commit - "Arquivo Excluído"

## Recuperar arquivo:------------ $ git log --diff-filter=D --summary
----------------------------------$ git checkout 7b10~1 arq2.txt (primeiros dig do commit + ~1 nomearquivo)

## Visualizar alteraçoes--------- $ git diff

## Reverte commit:--------------- $ git revert xxxxx(inicio log do commit)
				Abrir uma janema para exibir a reversão ... só fechar

## Deletar projeto:--------------$ cd .. para sair da pasta do projeto
				$ pwd (verificar o diretório) 
				$ rm -rf pastaDoProjeto



## GIT BRANCH ##


Branches são as ramificações de um projeto.
no Github é utilizadopara separar e gerenciar as versões do projeto. A branch principal é donomitada "main".

Objetivo da new_branch e podermos trabalho no projeto sem alterar a branch principal.

Craindo uma nova branch:

No Terminal:
## Exibir branches-----------------$ git branch	

obs: o * mostra em que brach estamos trabalhando.
OBS: **sempre criar nova branches a paratir a branch principal... MAIN**

## Criar branch--------------------$ git branch sua_new_brench
## Criar branch e acessa-la direto $ git branch -b sua_new_brench

obs: antes de mudar de branch realizar qualquer commit que esteja faltando.

## Trocar de branch----------------$ git checkout sua_branch_escolhida

OBS: a partir de agora podemos realizar alterações no projeto sem que afetem a branch main (principal)

## Deletar uma branch---------------$ git branch -d sua_branch

OBS: Não esquecer o commit!!! quando mudar de branch.

## GIT MERGE ##


A merge passa pela avaliação do code review(responsável pela aprovação)
Obs: Certifique-se de estar na "MAIN" para executar a merge.

## Executar a merge-----------------$ git merge sua_branch

Ons: caso vc tenha criado uma branch e a mesma acabou ficando desatualizada em
relação ao "MAIN" vc pode acessar sua branch e dat um merge a partir dela para o main para atualiza-la. (isso é muito comum em produção)

## GIT STASH ##

O git stash permite que ao estar trabalhando em uma branch e mesmo após várias alterações vc consiga voltar ao estado inicial.

## Executar o stash------------------$ git stash

Obs: o stash cria um hash ex: c35fe16 que vc pode recuperar posteriormente.

## Revertendo stash:
acesse o branch que vc estava e execute um --$ git stash list
Obs: o stash cria um indice ID ex: stash@{}
stash@{0}: blablalllallvlvl
stash@{1}: blablalllallvlvl
stash@{2}: blablalllallvlvl

Para visualizar o conteúdo--------------$ git stash show -p x(x=indice desejado)


















